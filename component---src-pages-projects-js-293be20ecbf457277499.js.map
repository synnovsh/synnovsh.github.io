{"version":3,"sources":["webpack:///./src/pages/projects.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/richImage.js","webpack:///./src/components/seo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/components/video.js","webpack:///./src/components/slideshow.js","webpack:///./src/components/blockContent.js"],"names":["query","List","styled","ul","_templateObject","Item","article","_templateObject2","Info","div","_templateObject3","minColumnWidth","ProjectItem","_ref2","project","mainImage","title","slug","_rawDescription","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","gatsby__WEBPACK_IMPORTED_MODULE_1__","to","current","_components_blockContent__WEBPACK_IMPORTED_MODULE_6__","blocks","_components_richImage__WEBPACK_IMPORTED_MODULE_5__","image","projects","_ref","projectNodes","data","edges","map","edge","node","mapEdgesToNodes","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_components_seo__WEBPACK_IMPORTED_MODULE_4__","className","key","id","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","loader","enqueue","React","createContext","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","_sanity_image_url__WEBPACK_IMPORTED_MODULE_1__","_sanity_image_url__WEBPACK_IMPORTED_MODULE_1___default","_studio_sanity_json__WEBPACK_IMPORTED_MODULE_2__","builder","imageUrlBuilder","sanityConfig","api","RichImage","source","alt","asset","caption","url","src","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","Header","siteTitle","react_default","gatsby_browser_entry","Content","Layout","children","_856328897","Fragment","header","Date","getFullYear","Video","autoPlay","loop","muted","playsInline","Slideshower","props","length","Slide","li","index","Slideshow","slides","len","_useState","useState","setIndex","type","onClick","Math","max","disabled","min","slide","_key","components_richImage","serializers","types","video","components_video","richImage","block","style","test","replace","BlockRenderer","slideshow","_ref3","components_slideshow","BlockContent","_ref4","BlockContent_default"],"mappings":"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","file":"component---src-pages-projects-js-293be20ecbf457277499.js","sourcesContent":["import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport styled from \"styled-components\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport RichImage from \"../components/richImage\"\nimport BlockContent from \"../components/blockContent\"\n\nexport const query = graphql`\n  query ProjectsQuery {\n    projects: allSanityProject(sort: { fields: creationDate }) {\n      edges {\n        node {\n          id\n          mainImage {\n            alt\n            asset {\n              id\n            }\n          }\n          title\n          creationDate\n          slug {\n            current\n          }\n          _rawDescription\n          category {\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nconst mapEdgesToNodes = data => {\n  if (!data.edges) return []\n  return data.edges.map(edge => edge.node)\n}\n\nconst List = styled.ul`\n  margin: 0;\n  list-style-type: none;\n`\n\nconst projects = ({ data }) => {\n  const projectNodes = mapEdgesToNodes(data.projects)\n  return (\n    <Layout>\n      <SEO title=\"Projects\" />\n      <List>\n        {projectNodes.map(project => (\n          <li className=\"project\" key={project.id}>\n            <ProjectItem project={project} />\n          </li>\n        ))}\n      </List>\n    </Layout>\n  )\n}\n\nconst minColumnWidth = 300\nconst imageWidth = 400\n\nconst Item = styled.article`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(${minColumnWidth}px, 1fr));\n  align-content: center;\n  justify-items: center;\n\n  width: 100%;\n  a {\n    text-decoration: none;\n  }\n  img {\n    max-width: ${imageWidth}px;\n    width: 100%;\n  }\n`\n\nconst Info = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: ${minColumnWidth}px;\n  justify-content: center;\n\n  @media only screen and (max-width: ${minColumnWidth * 2}px) {\n    align-items: center;\n    width: 100%;\n  }\n\n  h1 {\n    text-transform: uppercase;\n    letter-spacing: 0.05em;\n  }\n  p {\n    color: rgba(0, 0, 0, 0.5);\n  }\n`\n\nconst ProjectItem = ({ project }) => {\n  const { mainImage, title, slug, _rawDescription } = project\n  return (\n    <Item>\n      <Info>\n        <Link to={`/project/${slug.current}`}>\n          <h1>{title}</h1>\n        </Link>\n        <BlockContent blocks={_rawDescription} />\n      </Info>\n      <Link to={`/project/${slug.current}`}>\n        <RichImage image={mainImage} />\n      </Link>\n    </Item>\n  )\n}\n\nexport default projects\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\"\nimport imageUrlBuilder from \"@sanity/image-url\"\n\nimport sanityConfig from \"../../../studio/sanity.json\"\n\nconst builder = imageUrlBuilder(sanityConfig.api)\n\nexport function imageUrlFor(source) {\n  return builder.image(source)\n}\n\nconst RichImage = ({ image }) => {\n  const {\n    alt,\n    asset: { id },\n    caption,\n  } = image\n\n  const url = imageUrlFor(id)\n\n  return (\n    <figure>\n      <img alt={alt} src={url} />\n      {caption && <figcaption>{caption}</figcaption>}\n    </figure>\n  )\n}\n\nexport default RichImage\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header>\n    <div>\n      <h1>\n        <Link to=\"/\">{siteTitle}</Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport styled from \"styled-components\"\n\nimport \"typeface-montserrat\"\nimport \"typeface-lato\"\nimport \"./normalize.css\"\nimport \"./reset.css\"\nimport \"./typography.css\"\n\nimport Header from \"./header\"\n\nconst Content = styled.div`\n  display: grid;\n  grid-template-columns: auto minmax(auto, 1200px) auto;\n  justify-items: center;\n  main {\n    grid-area: 1/2;\n    width: 100%;\n  }\n  img {\n    max-width: 100vw;\n  }\n\n  a {\n    color: inherit;\n    text-decoration: underline;\n  }\n`\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <Content>\n        <main>{children}</main>\n      </Content>\n      <footer>{`© ${new Date().getFullYear()}`}</footer>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\n\nconst Video = ({ node }) => {\n  const { url } = node.source.asset\n  return (\n    <>\n      <video autoPlay loop muted playsInline src={url} />\n    </>\n  )\n}\n\nexport default Video\n","import React, { useState } from \"react\"\nimport styled from \"styled-components\"\n\nimport RichImage from \"./richImage\"\n\nconst Slideshower = styled.ul`\n  overflow: hidden;\n  width: 100%;\n\n  div {\n    width: ${props => props.length * 100}%;\n  }\n`\n\nconst Slide = styled.li`\n  transform: translate3d(${props => props.index * -100}%, 0, 0);\n  transition: transform 250ms;\n  float: left;\n\n  figure {\n    flex-flow: column nowrap !important;\n    align-items: flex-start !important;\n    justify-content: flex-start !important;\n  }\n`\n\nconst Slideshow = ({ slides }) => {\n  const len = slides.length\n  const [index, setIndex] = useState(0)\n  const handlePrev = () => {\n    setIndex(Math.max(index - 1, 0))\n  }\n  const handleNext = () => {\n    setIndex(Math.min(index + 1, len - 1))\n  }\n  return (\n    <>\n      <div className=\"slideshow-nav\">\n        <button type=\"button\" onClick={handlePrev} disabled={index === 0}>\n          Prev\n        </button>\n        <span>\n          {index + 1} of {len}\n        </span>\n        <button type=\"button\" onClick={handleNext} disabled={index === len - 1}>\n          Next\n        </button>\n      </div>\n      <Slideshower length={len}>\n        <div>\n          {slides.map(slide => (\n            <Slide index={index} key={slide._key}>\n              <RichImage image={slide} />\n            </Slide>\n          ))}\n        </div>\n      </Slideshower>\n    </>\n  )\n}\n\nexport default Slideshow\n","import React from \"react\"\n\nimport BaseBlockContent from \"@sanity/block-content-to-react\"\nimport Video from \"./video\"\nimport RichImage from \"./richImage\"\nimport Slideshow from \"./slideshow\"\n\nconst BlockRenderer = props => {\n  const style = props.node.style || \"normal\"\n\n  if (/^h\\d/.test(style)) {\n    const level = style.replace(/[^\\d]/g, \"\")\n    switch (level) {\n      case \"1\":\n        return <h1 id={props.children[0]}>{props.children}</h1>\n      case \"2\":\n        return <h2>{props.children}</h2>\n      case \"3\":\n        return <h3>{props.children}</h3>\n      case \"4\":\n        return <h4>{props.children}</h4>\n      case \"5\":\n        return <h5>{props.children}</h5>\n      case \"6\":\n        return <h6>{props.children}</h6>\n\n      default:\n        return <h1>{props.children}</h1>\n    }\n  }\n\n  return style === \"blockquote\" ? (\n    <blockquote className=\"my-block-quote\">{props.children}</blockquote>\n  ) : (\n    <p className=\"my-paragraph\">{props.children}</p>\n  )\n}\n\nconst serializers = {\n  types: {\n    video({ node }) {\n      return <Video node={node} />\n    },\n    richImage({ node: image }) {\n      return <RichImage image={image} />\n    },\n    block(props) {\n      return BlockRenderer(props)\n    },\n    slideshow({ node: { slides } }) {\n      return <Slideshow slides={slides} />\n    },\n  },\n}\n\nconst BlockContent = ({ blocks }) => (\n  <BaseBlockContent blocks={blocks} serializers={serializers} />\n)\n\nexport default BlockContent\n"],"sourceRoot":""}