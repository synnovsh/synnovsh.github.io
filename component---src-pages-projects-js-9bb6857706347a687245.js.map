{"version":3,"sources":["webpack:///./src/pages/projects.js"],"names":["query","List","styled","div","Item","article","Info","ProjectItem","project","mainImage","title","slug","_rawDescription","to","current","blocks","image","projects","projectNodes","data","edges","map","edge","node","mapEdgesToNodes","className","key","id"],"mappings":"0FAAA,mHASaA,EAAK,aAkCZC,EAAOC,IAAOC,IAAV,iEAAGD,CAAH,4IAFO,KAkCXE,EAAOF,IAAOG,QAAV,iEAAGH,CAAH,yNAqBJI,EAAOJ,IAAOC,IAAV,iEAAGD,CAAH,8LAeJK,EAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACbC,EAA4CD,EAA5CC,UAAWC,EAAiCF,EAAjCE,MAAOC,EAA0BH,EAA1BG,KAAMC,EAAoBJ,EAApBI,gBAChC,OACE,kBAACR,EAAD,KACE,kBAACE,EAAD,KACE,kBAAC,OAAD,CAAMO,GAAE,YAAcF,EAAKG,SACzB,4BAAKJ,IAEP,kBAAC,IAAD,CAAcK,OAAQH,KAExB,kBAAC,OAAD,CAAMC,GAAE,YAAcF,EAAKG,SACzB,kBAAC,IAAD,CAAWE,MAAOP,OAMXQ,UAvEE,SAAC,GAAc,IACxBC,EAtBgB,SAAAC,GACtB,OAAKA,EAAKC,MACHD,EAAKC,MAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,QADX,GAqBHC,CADQ,EAAXL,KACwBF,UAC1C,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKP,MAAM,aACX,kBAACT,EAAD,KACE,4BACGiB,EAAaG,KAAI,SAAAb,GAAO,OACvB,wBAAIiB,UAAU,UAAUC,IAAKlB,EAAQmB,IACnC,kBAACpB,EAAD,CAAaC,QAASA","file":"component---src-pages-projects-js-9bb6857706347a687245.js","sourcesContent":["import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport styled from \"styled-components\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport RichImage from \"../components/richImage\"\nimport BlockContent from \"../components/blockContent\"\n\nexport const query = graphql`\n  query ProjectsQuery {\n    projects: allSanityProject(sort: { fields: creationDate }) {\n      edges {\n        node {\n          id\n          mainImage {\n            alt\n            asset {\n              id\n            }\n          }\n          title\n          creationDate\n          slug {\n            current\n          }\n          _rawDescription\n          category {\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nconst mapEdgesToNodes = data => {\n  if (!data.edges) return []\n  return data.edges.map(edge => edge.node)\n}\n\nconst maxWidth = 1000\n\nconst List = styled.div`\n  display: grid;\n  grid-template-columns: minmax(0px, auto) minmax(0, ${maxWidth}px) minmax(\n      0px,\n      auto\n    );\n\n  ul {\n    grid-area: 1/2;\n    margin: 0;\n    list-style-type: none;\n  }\n`\n\nconst projects = ({ data }) => {\n  const projectNodes = mapEdgesToNodes(data.projects)\n  return (\n    <Layout>\n      <SEO title=\"Projects\" />\n      <List>\n        <ul>\n          {projectNodes.map(project => (\n            <li className=\"project\" key={project.id}>\n              <ProjectItem project={project} />\n            </li>\n          ))}\n        </ul>\n      </List>\n    </Layout>\n  )\n}\n\nconst Item = styled.article`\n  \n  display: flex;\n  flex-direction: column-reverse;\n\n  @media screen and (min-width: 600px) {\n  display: grid;\n  grid-template-columns: 45% 50%;\n  column-gap: 5%;\n  \n  }\n\n  figure {\n    transition: transform 0.5s;\n    &:hover {\n      width: 20\n      transform: scale(0.95);\n    }\n  }\n`\n\nconst Info = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding: 2em 0;\n\n  @media screen and (min-width: 600px) {\n    border-bottom: 1px solid rgba(225, 225, 255, 0.9);\n  }\n\n  h1 {\n    text-transform: uppercase;\n  }\n`\n\nconst ProjectItem = ({ project }) => {\n  const { mainImage, title, slug, _rawDescription } = project\n  return (\n    <Item>\n      <Info>\n        <Link to={`/project/${slug.current}`}>\n          <h1>{title}</h1>\n        </Link>\n        <BlockContent blocks={_rawDescription} />\n      </Info>\n      <Link to={`/project/${slug.current}`}>\n        <RichImage image={mainImage} />\n      </Link>\n    </Item>\n  )\n}\n\nexport default projects\n"],"sourceRoot":""}